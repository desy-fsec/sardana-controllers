from sardana.pool.controller import PseudoMotorController
from sardana.pool.controller import DefaultValue, Description, Access, Type
from sardana import DataAccess


class BL13EHKappaAlignController(PseudoMotorController):
    """ Calculate kappa value for a constant centered point.
    """
    tolerance = 0.01
    pseudo_motor_roles = ('kappa_aligned',)
    motor_roles = ('omegax','centx', 'centy', 'kappa')

    # Introduce attributes here.
    # They are automatically declared as class members

    axis_attributes = {'x1': {Type: float,
                              Access: DataAccess.ReadWrite,
                              Description: 'Pending'}, }

    def __init__(self, inst, props, *args, **kwargs):
        PseudoMotorController.__init__(self, inst, props, *args, **kwargs)

    def CalcPhysical(self, index, pseudos, curr_physicals):
        # get pseudo position
        kappa_aligned, = pseudos
        # get physicals with calibration
        ox, cx, cy = kappa.calculation(kappa, calibration)
        return ox, cx, cy

    def CalcPseudo(self, index, physicals, curr_pseudos):
        omegax, centx, centy, kappa = physicals
        # check if kappa aligned
        # get physicals with calibration
        ox, cx, cy = kappa.calculation(kappa, calibration)
        # compare with current values with tolerance:
        if abs(self.omegax - ox) > self.tolerance or \
           abs(self.centx - cx) > self.tolerance or \
           abs(self.centy - cy) > self.tolerance:
            k = 'NaN'
        else:
            k = self.kappa
        return float(k)

    # Introduce here attribute setter.
    def SetAxisExtraPar(self, axis, parameter, value):
        if parameter == 'x1':
            self.x1 = value

    # Introduce here attribute getter.
    def GetAxisExtraPar(self, axis, parameter):
        if parameter == 'x1':
            return self.x1
        else:
            return 1
